use anyhow::Result;
use chrono::Local;

use crate::ir::Config;

pub mod json;
pub mod postgres;
pub mod prisma;

pub trait Backend {
    fn name(&self) -> &'static str;
    fn file_extension(&self) -> &'static str;
    fn generate(&self, cfg: &Config, strict: bool) -> Result<String>;
}

pub fn generate_header_comment(backend_name: &str, comment_style: CommentStyle) -> String {
    let timestamp = Local::now().format("%Y-%m-%d %H:%M:%S %Z").to_string();
    let warning = format!(
        "WARNING: This file is auto-generated by dbschema.\n\
         Do not edit this file manually. Any changes will be overwritten\n\
         the next time the schema is regenerated.\n\
         \n\
         Backend: {}\n\
         Generated: {}",
        backend_name, timestamp
    );
    
    match comment_style {
        CommentStyle::Sql => {
            let lines: Vec<String> = warning.lines().map(|line| format!("-- {}", line)).collect();
            format!("{}\n\n", lines.join("\n"))
        }
        CommentStyle::Prisma => {
            let lines: Vec<String> = warning.lines().map(|line| format!("// {}", line)).collect();
            format!("{}\n\n", lines.join("\n"))
        }
    }
}

pub enum CommentStyle {
    Sql,
    Prisma,
}

pub fn get_backend(name: &str) -> Option<Box<dyn Backend>> {
    match name.to_lowercase().as_str() {
        "postgres" | "pg" => Some(Box::new(postgres::PostgresBackend)),
        "json" => Some(Box::new(json::JsonBackend)),
        "prisma" => Some(Box::new(prisma::PrismaBackend)),
        _ => None,
    }
}
